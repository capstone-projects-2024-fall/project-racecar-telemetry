"use strict";(self.webpackChunkcreate_project_docs=self.webpackChunkcreate_project_docs||[]).push([[6891],{50413:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>g,contentTitle:()=>s,default:()=>m,frontMatter:()=>r,metadata:()=>o,toc:()=>d});var t=a(74848),i=a(28453);const r={sidebar_position:1},s=void 0,o={id:"system-architecture/Webpage Design",title:"Webpage Design",description:"Front-End Figma Design",source:"@site/docs/system-architecture/Webpage Design.md",sourceDirName:"system-architecture",slug:"/system-architecture/Webpage Design",permalink:"/project-racecar-telemetry/docs/system-architecture/Webpage Design",draft:!1,unlisted:!1,editUrl:"https://github.com/capstone-projects-2024-fall/project-racecar-telemetry/edit/main/documentation/docs/system-architecture/Webpage Design.md",tags:[],version:"current",lastUpdatedBy:"Arjun Patel",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"docsSidebar",previous:{title:"Design Overview",permalink:"/project-racecar-telemetry/docs/system-architecture/Design Overview"},next:{title:"Hardware Design",permalink:"/project-racecar-telemetry/docs/system-architecture/Hardware Design"}},g={},d=[{value:"Front-End Figma Design",id:"front-end-figma-design",level:2},{value:"Front-End UML Class Diagram",id:"front-end-uml-class-diagram",level:2}];function c(e){const n={h2:"h2",img:"img",mermaid:"mermaid",p:"p",...(0,i.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.h2,{id:"front-end-figma-design",children:"Front-End Figma Design"}),"\n",(0,t.jsxs)(n.p,{children:["Login Page:\n",(0,t.jsx)(n.img,{alt:"login",src:a(66003).A+"",width:"1200",height:"1398"})]}),"\n",(0,t.jsxs)(n.p,{children:["Dashboard (Connected):\n",(0,t.jsx)(n.img,{alt:"dashboardConnected",src:a(38334).A+"",width:"1200",height:"1494"})]}),"\n",(0,t.jsxs)(n.p,{children:["Dashboard (Not Connected):\n",(0,t.jsx)(n.img,{alt:"dashboardConnected",src:a(60383).A+"",width:"1200",height:"1494"})]}),"\n",(0,t.jsxs)(n.p,{children:["Component Editor:\n",(0,t.jsx)(n.img,{alt:"dashboardConnected",src:a(11324).A+"",width:"1200",height:"1494"})]}),"\n",(0,t.jsxs)(n.p,{children:["Data Assignment Window:\n",(0,t.jsx)(n.img,{alt:"dashboardConnected",src:a(41383).A+"",width:"1200",height:"1398"})]}),"\n",(0,t.jsx)(n.h2,{id:"front-end-uml-class-diagram",children:"Front-End UML Class Diagram"}),"\n",(0,t.jsx)(n.p,{children:"This diagram shows the different components which will make up the Dashboard of the web app. The main Page component consists of GraphEditor, NavBar, DataGauge, TimeSeriesGraph, GGDiagram, LinearGauge, and DataWidget, which are all ways that our website displays data. The CANConfiguration page, along with its related components, ConfigManager, CANDataAssignment, and CANInput manage CAN customization."}),"\n",(0,t.jsx)(n.mermaid,{value:"classDiagram\nApp *-- Page\nPage *-- GraphEditor\nPage *-- NavBar\nPage *-- DataGauge\nPage *-- TimeSeriesGraph\nPage *-- GGDiagram\nPage *-- LinearGauge\nPage *-- DataWidget\nApp *-- CANConfiguration\nCANConfiguration *-- ConfigManager\nCANConfiguration *-- CANDataAssignment\n\n\n\nCANDataAssignment *-- CANInput\n\n\nDataGauge: +String canID\nDataGauge: +String metricKey\nDataGauge: +String title\nDataGauge: +Number maxPrimaryRange\nDataGauge: +Number maxSecondaryRange\nDataGauge: +String primaryUnit\nDataGauge: +String secondaryUnit\nDataGauge: +Number metricValue\nDataGauge: +Boolean isSecondaryUnit = false\nDataGauge: +useEffect()void\nDataGauge: +convertToFahrenheit(number)number\nDataGauge: +convertToMPH(number)number\nDataGauge: +toggleUnit()void\nDataGauge: +setMetricValue(String)void\nDataGauge: +setIsSecondaryUnit(Bool)void\n\nTimeSeriesGraph: +String canID\nTimeSeriesGraph: +String yAxis\nTimeSeriesGraph: +String title\nTimeSeriesGraph: +Array timestamps\nTimeSeriesGraph: +Array axisToPlot\nTimeSeriesGraph: +useEffect()void\nTimeSeriesGraph: +Array data\nTimeSeriesGraph: +Object layout\nTimeSeriesGraph: +setTimestamps(Array)void\nTimeSeriesGraph: +setAxisToPlot(Array)void\n\nLinearGauge: +String canID\nLinearGauge: +String valueToShow\nLinearGauge: +String title\nLinearGauge: +String value\nLinearGauge: +useEffect()void\nLinearGauge: +Array data \nLinearGauge: +Object latout\nLinearGauge: +setValue(String)void\n\nDataWidget: +String canID\nDataWidget: +String valueToDisplay\nDataWidget: +Int number\nDataWidget: +String text\nDataWidget: +useEffect()void\nDataWidget: +setNumber()void\nDataWidget: +setText()void\n\n\n\n\n\nGGDiagram: +String canID\nGGDiagram: +String title\nGGDiagram: +Array lateral\nGGDiagram: +Array longitudinal\nGGDiagram: +useEffect()void\nGGDiagram: +Array data\nGGDiagram: +Object Layout\nGGDiagram: +setLat(Array)void\nGGDiagram: +setLong(Array)void\n\n\nNavBar: +Bool isConnected\n\nPage: +Object attributes\nPage: +Object listeners\nPage: +Object transform\nPage: +Object transistion\nPage: +Object style\nPage: +State layout\n\nPage: +setNodeRef()void\nPage: +setLayout()void\nPage: +useSensors()void\nPage: +handleDragEnd(event)void\n\n\n\nGraphEditor: +int DataChannel\nGraphEditor: +String DataLabel\nGraphEditor: +String DisplayType\nGraphEditor: +int UnitOfMeasure\nGraphEditor: +String Color\nGraphEditor: +int Max\nGraphEditor: +int Min\n\n\nGraphEditor: +setDataChannel(int)void\nGraphEditor: +setDataLabel(String)void\nGraphEditor: +setDisplayType(String)void\nGraphEditor: +setUnitOfMeasure(int)void\nGraphEditor: +setColor(String)void\nGraphEditor: +setMax(int)void\nGraphEditor: +setMin(int)void\n\nCANDataAssignment: +Array rows\nCANDataAssignment: +setRows(Array)void\nCANDataAssignment: +handleAddRow(Array)void\nCANDataAssignment: +handleRowChange(int, Object)void\nCANDataAssignment: +handleSubmit()void\nCANDataAssignment: +handleCancel()void\n\nCANInput: +Int index\nCANInput: +Object row\nCANInput: +onRowChange(Object)void\nCANInput: +handleInputChange(String, Int)void\n\nConfigManager: +Array configs\nConfigManager: +setConfigs(array)void\nConfigManager: +String selectedConfig\nConfigManager: +setSelectedConfig(array)void\nConfigManager: +Object configData\nConfigManager: +setConfigData(Object)void\nConfigManager: +String errorMessage\nConfigManager: +setErrorMessage(String)void\nConfigManager: +fetchConfigs(String)Object\nConfigManager: +useEffect()void\nConfigManager: +selectConfig()void\nConfigManager: +createConfig()void\n\nCANConfiguration: +String selectedConfig\nCANConfiguration: +setSelectedConfig(String)void"})]})}function m(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(c,{...e})}):c(e)}},11324:(e,n,a)=>{a.d(n,{A:()=>t});const t=a.p+"assets/images/ComponentEditor-41d849039911403d8555e9e777beb1a5.png"},38334:(e,n,a)=>{a.d(n,{A:()=>t});const t=a.p+"assets/images/Dashboard_Connected-8484d49c6039bd3cdcf8fd3ebe4f8778.png"},60383:(e,n,a)=>{a.d(n,{A:()=>t});const t=a.p+"assets/images/Dashboard_NotConnected-5065dd1c44dfbaf577d8eaab06c64698.png"},41383:(e,n,a)=>{a.d(n,{A:()=>t});const t=a.p+"assets/images/DataAssignment-24f3596e01aa09c2e35b0becf44c85fa.png"},66003:(e,n,a)=>{a.d(n,{A:()=>t});const t=a.p+"assets/images/Login_Page-b623326a7e46793fc28fecbebf141ab4.png"},28453:(e,n,a)=>{a.d(n,{R:()=>s,x:()=>o});var t=a(96540);const i={},r=t.createContext(i);function s(e){const n=t.useContext(r);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:s(e.components),t.createElement(r.Provider,{value:n},e.children)}}}]);