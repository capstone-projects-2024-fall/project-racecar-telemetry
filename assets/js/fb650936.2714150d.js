(self.webpackChunkcreate_project_docs=self.webpackChunkcreate_project_docs||[]).push([[2542],{47589:(e,t,a)=>{"use strict";a.r(t),a.d(t,{assets:()=>m,contentTitle:()=>l,default:()=>h,frontMatter:()=>d,metadata:()=>u,toc:()=>b});var i=a(74848),n=a(28453),o=a(96540),s=a(19292),r=a(66588);const c=function(e){const t=(0,r.kh)("docusaurus-plugin-redoc");return e?t?.[e]:Object.values(t??{})?.[0]},p=e=>{let{id:t}=e;const a=c(t),n=(0,o.useMemo)((()=>({theme:{breakpoints:{medium:"130rem",large:"130rem"}}})),[]);return(0,i.jsx)(s.A,{...a,optionsOverrides:n})},d={title:"API - ESP to Firebase and Web Integration",description:"This API specification outlines the operations enabling data synchronization and communication between an ESP and Firebase Realtime Database, as well as the integration of Firebase Realtime Database with Firestore for data management and connectivity to a web application.",hide_table_of_contents:!0,sidebar_position:2},l=void 0,u={id:"api-specification/openapi-spec",title:"API - ESP to Firebase and Web Integration",description:"This API specification outlines the operations enabling data synchronization and communication between an ESP and Firebase Realtime Database, as well as the integration of Firebase Realtime Database with Firestore for data management and connectivity to a web application.",source:"@site/docs/api-specification/openapi-spec.md",sourceDirName:"api-specification",slug:"/api-specification/openapi-spec",permalink:"/project-racecar-telemetry/docs/api-specification/openapi-spec",draft:!1,unlisted:!1,editUrl:"https://github.com/capstone-projects-2024-fall/project-racecar-telemetry/edit/main/documentation/docs/api-specification/openapi-spec.md",tags:[],version:"current",lastUpdatedBy:"NasierF",sidebarPosition:2,frontMatter:{title:"API - ESP to Firebase and Web Integration",description:"This API specification outlines the operations enabling data synchronization and communication between an ESP and Firebase Realtime Database, as well as the integration of Firebase Realtime Database with Firestore for data management and connectivity to a web application.",hide_table_of_contents:!0,sidebar_position:2},sidebar:"docsSidebar",previous:{title:"Design Document - Part II API",permalink:"/project-racecar-telemetry/docs/api-specification/design-api-intro"},next:{title:"Test Procedures",permalink:"/project-racecar-telemetry/docs/category/test-procedures"}},m={},b=[];function f(e){return(0,i.jsx)(p,{id:"using-single-yaml"})}function h(e={}){const{wrapper:t}={...(0,n.R)(),...e.components};return t?(0,i.jsx)(t,{...e,children:(0,i.jsx)(f,{...e})}):f()}},26903:()=>{},15915:()=>{},67889:()=>{},33880:()=>{},14834:()=>{},20922:()=>{},81912:()=>{},28453:(e,t,a)=>{"use strict";a.d(t,{R:()=>s,x:()=>r});var i=a(96540);const n={},o=i.createContext(n);function s(e){const t=i.useContext(o);return i.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function r(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(n):e.components||n:s(e.components),i.createElement(o.Provider,{value:t},e.children)}}}]);